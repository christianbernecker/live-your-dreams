FROM node:20-alpine AS builder

RUN apk add --no-cache libc6-compat
RUN npm install -g pnpm@9.0.0

WORKDIR /app

# Copy root files
COPY package.json pnpm-lock.yaml pnpm-workspace.yaml ./

# Copy package.json files first
COPY packages/design-tokens/package.json ./packages/design-tokens/
COPY packages/design-system/package.json ./packages/design-system/
COPY packages/design-system-react/package.json ./packages/design-system-react/
COPY apps/backoffice/package.json ./apps/backoffice/

# Install ALL dependencies
RUN pnpm install --frozen-lockfile

# Copy source code
COPY packages/ ./packages/
COPY apps/backoffice/ ./apps/backoffice/

# Build packages in order
RUN pnpm --filter @liveyourdreams/design-tokens build
RUN pnpm --filter @liveyourdreams/design-system build  
RUN pnpm --filter @liveyourdreams/design-system-react build

# Build backoffice with standalone output
WORKDIR /app/apps/backoffice
RUN npx prisma generate
RUN pnpm build

# Production stage
FROM node:20-alpine AS runner

RUN apk add --no-cache libc6-compat
WORKDIR /app

# Create nextjs user
RUN addgroup --system --gid 1001 nodejs
RUN adduser --system --uid 1001 nextjs

# Copy necessary files  
COPY --from=builder /app/apps/backoffice/.next/standalone ./
COPY --from=builder /app/apps/backoffice/.next/static ./apps/backoffice/.next/static
COPY --from=builder /app/apps/backoffice/prisma ./prisma

# Create empty public dir if needed
RUN mkdir -p ./public

# Set permissions
RUN chown -R nextjs:nodejs /app

USER nextjs

EXPOSE 3000
ENV PORT=3000
ENV NODE_ENV=production
ENV HOSTNAME="0.0.0.0"

# WICHTIG: Direkter Start ohne pnpm
CMD ["node", "apps/backoffice/server.js"]
