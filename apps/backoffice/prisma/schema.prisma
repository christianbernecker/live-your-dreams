// Life Your Dreams - Backoffice Database Schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// User Management & Authentication
model User {
  id        String   @id @default(cuid())
  email     String   @unique @db.Citext
  name      String?
  avatar    String?
  role      UserRole @default(USER)
  
  // Authentication
  password         String?
  totpSecret       String?
  totpEnabled      Boolean @default(false)
  totpBackupCodes  Json?   // Array of hashed backup codes
  lastLoginAt      DateTime?
  
  // Audit
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  
  // Relations
  properties Property[]
  leads      Lead[]
  
  @@map("users")
}

enum UserRole {
  ADMIN
  USER
}

// Property Management
model Property {
  id          String         @id @default(cuid())
  title       String
  description String?
  
  // Basic Info
  type        PropertyType
  status      PropertyStatus @default(DRAFT)
  city        String
  postcode    String
  address     String?
  
  // Details
  price          Int // in cents
  livingArea     Float?
  totalArea      Float?
  roomCount      Float?
  bedrooms       Int?
  bathrooms      Int?
  buildYear      Int?
  
  // Energy Certificate (GEG § 87 Pflichtangaben)
  energyType           String? // "Verbrauch" | "Bedarf"
  energyValue          Float?  // Energiekennwert in kWh/(m²·a)
  energyClass          String? // A+ bis H
  energyCarrier        String? // Fernwärme, Gas, Öl, etc.
  
  // GEG § 87 Erweiterte Pflichtangaben
  energyCertType       String? // "Wohnung" | "Nichtwohngebäude"
  energyCertIssueYear  Int?    // Ausstellungsjahr des Energieausweises
  energyCertValidUntil DateTime? // Gültigkeitsdatum
  
  // Verbrauchsausweis spezifisch (nur bei energyType="Verbrauch")
  heatingConsumption   Float?  // Heizenergieverbrauch kWh/(m²·a)
  hotWaterConsumption  Float?  // Warmwasserverbrauch kWh/(m²·a)
  consumptionYears     String? // "2019-2021" - Referenzzeitraum
  
  // Microsite
  slug           String?  @unique
  micrositeUrl   String?
  published      Boolean  @default(false)
  publishedAt    DateTime?
  
  // Audit
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  createdBy   String
  user        User     @relation(fields: [createdBy], references: [id])
  
  // Relations
  rooms       Room[]
  media       Media[]
  leads       Lead[]
  listings    Listing[]
  
  @@index([status, city])
  @@index([createdBy, status])
  @@map("properties")
}

enum PropertyType {
  WOHNUNG
  HAUS
  REIHENHAUS
  DOPPELHAUS
  MEHRFAMILIENHAUS
  GEWERBE
}

enum PropertyStatus {
  DRAFT
  REVIEW
  PUBLISHED
  SOLD
  ARCHIVED
}

// Room Details
model Room {
  id          String @id @default(cuid())
  name        String
  type        RoomType
  area        Float?
  description String?
  
  // Relations
  propertyId  String
  property    Property @relation(fields: [propertyId], references: [id], onDelete: Cascade)
  media       Media[]
  
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  
  @@map("rooms")
}

enum RoomType {
  WOHNZIMMER
  SCHLAFZIMMER
  KUECHE
  BADEZIMMER
  GAESTE_WC
  FLUR
  BALKON
  TERRASSE
  GARTEN
  KELLER
  DACHBODEN
  GARAGE
  SONSTIGES
}

// Media Management
model Media {
  id          String    @id @default(cuid())
  filename    String
  originalName String
  mimeType    String
  size        Int
  
  // Storage
  s3Key       String    @unique
  s3Bucket    String
  cdnUrl      String?
  
  // Metadata
  width       Int?
  height      Int?
  alt         String?
  caption     String?
  
  // Processing
  processed   Boolean   @default(false)
  variants    Json?     // {"thumb": "url", "medium": "url", "large": "url"}
  
  // Relations
  propertyId  String?
  property    Property? @relation(fields: [propertyId], references: [id], onDelete: SetNull)
  roomId      String?
  room        Room?     @relation(fields: [roomId], references: [id], onDelete: SetNull)
  
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
  
  @@index([propertyId, createdAt])
  @@map("media")
}

// Lead Management
model Lead {
  id         String     @id @default(cuid())
  email      String     @db.Citext
  phone      String?
  name       String?
  message    String?
  source     LeadSource @default(MICROSITE)
  status     LeadStatus @default(NEW)
  
  // DSGVO
  gdprConsent   Boolean   @default(false)
  gdprConsentAt DateTime?
  optInToken    String?   @unique
  optInAt       DateTime?
  
  // Audit
  audit      Json? // {"ip": "1.2.3.4", "userAgent": "..."}
  
  // Relations
  propertyId String
  property   Property @relation(fields: [propertyId], references: [id], onDelete: Cascade)
  assignedTo String?
  assignee   User?    @relation(fields: [assignedTo], references: [id])
  
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt
  
  @@index([propertyId, createdAt])
  @@index([status, createdAt])
  @@map("leads")
}

enum LeadSource {
  MICROSITE
  IMMOSCOUT24
  PORTAL
  PHONE
  EMAIL
  REFERRAL
}

enum LeadStatus {
  NEW
  CONTACTED
  QUALIFIED
  VIEWING_SCHEDULED
  OFFER_MADE
  SOLD
  LOST
  SPAM
}

// Portal Listings
model Listing {
  id            String        @id @default(cuid())
  platform      ListingPlatform
  externalId    String?       // IS24 Object ID
  status        ListingStatus @default(DRAFT)
  
  // Sync
  lastSyncAt    DateTime?
  syncError     String?
  publishedAt   DateTime?
  
  // Relations
  propertyId    String
  property      Property      @relation(fields: [propertyId], references: [id], onDelete: Cascade)
  
  createdAt     DateTime      @default(now())
  updatedAt     DateTime      @updatedAt
  
  @@index([propertyId, status])
  @@map("listings")
}

enum ListingPlatform {
  IMMOSCOUT24
  IMMOWELT
  EBAY_KLEINANZEIGEN
  MICROSITE
}

enum ListingStatus {
  DRAFT
  PENDING
  PUBLISHED
  ERROR
  EXPIRED
}
