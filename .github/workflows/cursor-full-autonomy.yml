name: Cursor Full Autonomy - Design System
on:
  issue_comment:
    types: [created]
  workflow_dispatch:
    inputs:
      requirement:
        description: 'Design System Anforderung'
        required: true
        default: 'Prüfe Design System Konsistenz und behebe alle Probleme'

jobs:
  auto:
    if: ${{ startsWith(github.event.comment.body, '/auto ') || github.event_name == 'workflow_dispatch' }}
    runs-on: ubuntu-latest
    permissions:
      contents: write
      pull-requests: write
      actions: write
    env:
      CURSOR_API_KEY: ${{ secrets.CURSOR_API_KEY }}
      GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      MAX_PASSES: "6"
      AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
      AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
      AWS_DEFAULT_REGION: "eu-central-1"

    steps:
      - uses: actions/checkout@v4
        with: { fetch-depth: 0 }

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with: { node-version: "20" }

      - name: Install dependencies
        run: |
          if [ -f design-system/package.json ]; then
            cd design-system && npm ci
          fi

      - name: Install Docker
        run: |
          sudo apt-get update
          sudo apt-get install -y docker.io
          sudo systemctl start docker
          sudo usermod -aG docker $USER

      - name: Install AWS CLI
        run: |
          curl "https://awscli.amazonaws.com/awscli-exe-linux-x86_64.zip" -o "awscliv2.zip"
          unzip awscliv2.zip
          sudo ./aws/install

      - name: Install Cursor CLI
        run: |
          curl https://cursor.com/install -fsS | bash
          echo "$HOME/.cursor/bin" >> $GITHUB_PATH

      - name: Extract requirement
        id: req
        run: |
          if [ "${{ github.event_name }}" = "issue_comment" ]; then
            echo "${{ github.event.comment.body }}" | sed 's#^/auto ##' > requirement.txt
          else
            echo "${{ github.event.inputs.requirement }}" > requirement.txt
          fi
          echo "---- REQUIREMENT ----"
          cat requirement.txt

      - name: Create working branch
        id: br
        run: |
          BR="auto/design-system-fix-$(date +%s)"
          git checkout -b "$BR" || git checkout "$BR"
          echo "branch=$BR" >> $GITHUB_OUTPUT

      - name: Agent - Design System Implementation (Full Autonomy)
        run: |
          cursor-agent -p --force --output-format text --model claude-3-5-sonnet-20241022 "
          KONTEXT:
          - Du arbeitest vollautonom im GitHub Actions CI für das Live Your Dreams Design System
          - Fachliche Anforderung: $(cat requirement.txt)
          - Beachte Project Rules: DEFINITION_OF_DONE.mdc und AUTONOMY_POLICY.mdc
          - Live URL: http://designsystem.liveyourdreams.online
          
          AUFGABE:
          1. Analysiere die aktuelle Design System Konsistenz
          2. Identifiziere Logo- und Navigation-Inkonsistenzen
          3. Implementiere vollständig die fachliche Anforderung
          4. Teste alle URLs und Komponenten
          5. Baue und deploye Docker Image auf AWS ECS
          6. Verifiziere Live-Deployment
          7. Committe und pushe Änderungen
          8. Erstelle/aktualisiere PR
          
          WICHTIG:
          - Du DARFST und SOLLST git/gh/docker/aws Kommandos nutzen
          - Arbeite in kleinen Schritten
          - Verifikiere nach jedem Deployment
          - Behebe Probleme sofort
          " || true

      - name: Ensure PR exists
        run: |
          if ! gh pr view --json number >/dev/null 2>&1; then
            gh pr create --title "auto: Design System Konsistenz-Fix" \
              --body "$(echo 'Automatische Behebung von Design System Inkonsistenzen:'; echo ''; cat requirement.txt; echo ''; echo '## Änderungen'; echo '- Logo-Konsistenz auf allen Seiten'; echo '- Navigation-Vereinheitlichung'; echo '- Web Components Funktionalität'; echo '- AWS ECS Deployment')" \
              --head "${{ steps.br.outputs.branch }}" \
              --base "${{ github.event.repository.default_branch || 'main' }}"
          fi

      - name: Design System QA Gates
        id: qa
        continue-on-error: true
        run: |
          set -o pipefail
          
          echo "=== DESIGN SYSTEM QA GATES ===" | tee qa.log
          
          # 1. URL Erreichbarkeit
          echo "1. Testing URL accessibility..." | tee -a qa.log
          URLS=("http://designsystem.liveyourdreams.online/components/introduction/" 
                "http://designsystem.liveyourdreams.online/components/buttons/"
                "http://designsystem.liveyourdreams.online/components/inputs/"
                "http://designsystem.liveyourdreams.online/components/cards/"
                "http://designsystem.liveyourdreams.online/components/select/")
          
          for url in "${URLS[@]}"; do
            status=$(curl -s -o /dev/null -w "%{http_code}" "$url")
            if [ "$status" = "200" ]; then
              echo "✅ $url - OK" | tee -a qa.log
            else
              echo "❌ $url - Status: $status" | tee -a qa.log
              exit 1
            fi
          done
          
          # 2. Logo Konsistenz
          echo "2. Testing logo consistency..." | tee -a qa.log
          for url in "${URLS[@]}"; do
            logo_count=$(curl -s "$url" | grep -c "crescentGradient" || echo "0")
            if [ "$logo_count" -gt "0" ]; then
              echo "✅ $url - Korrektes Logo gefunden" | tee -a qa.log
            else
              echo "❌ $url - Falsches Logo" | tee -a qa.log
              exit 1
            fi
          done
          
          # 3. Navigation Konsistenz
          echo "3. Testing navigation consistency..." | tee -a qa.log
          for url in "${URLS[@]}"; do
            nav_count=$(curl -s "$url" | grep -c "nav-section-title" || echo "0")
            if [ "$nav_count" -gt "3" ]; then
              echo "✅ $url - Korrekte Navigation" | tee -a qa.log
            else
              echo "❌ $url - Inkonsistente Navigation" | tee -a qa.log
              exit 1
            fi
          done
          
          echo "✅ Alle QA Gates bestanden!" | tee -a qa.log

      - name: Autofix loop (if QA failed)
        if: steps.qa.outcome != 'success'
        run: |
          for i in $(seq 1 $MAX_PASSES); do
            echo "----- FIX PASS $i -----"
            cursor-agent -p --force --output-format text --model claude-3-5-sonnet-20241022 "
            KONTEXT:
            - QA-Fehlerausgaben unten zeigen Design System Probleme
            - Du musst diese Probleme beheben und erneut deployen
            
            AUFGABE:
            - Analysiere die QA-Fehler
            - Behebe Logo/Navigation-Inkonsistenzen
            - Deploye Änderungen auf AWS ECS
            - Committe und pushe selbst
            
            -------- QA LOG --------
            $(cat qa.log)
            " || true

            # QA erneut ausführen
            if bash -c 'source qa_gates.sh'; then
              echo "✅ QA grün nach Pass $i"
              break
            fi

            if [ "$i" = "$MAX_PASSES" ]; then
              echo "❌ QA nicht grün nach $MAX_PASSES Durchläufen"
              gh pr comment --body "❌ Automatische Behebung fehlgeschlagen nach $MAX_PASSES Versuchen. Manuelle Überprüfung erforderlich."
              exit 1
            fi
          done

      - name: Success notification
        if: steps.qa.outcome == 'success'
        run: |
          gh pr comment --body "✅ **Design System QA erfolgreich!**

          Alle Gates bestanden:
          - URLs erreichbar (HTTP 200)
          - Logo konsistent auf allen Seiten  
          - Navigation einheitlich strukturiert
          - Web Components funktional
          
          Deployment: AWS ECS Task Definition aktualisiert
          Live: http://designsystem.liveyourdreams.online"

      - name: Auto-merge if all green
        if: steps.qa.outcome == 'success'
        run: |
          # Auto-merge nur wenn Branch Protection alle Checks grün fordert
          gh pr merge --squash --auto || echo "Auto-merge nicht möglich (Branch Protection)"
